#!/usr/bin/env bash

BEGIN=$(date +'%d-%m_%H:%M:%S')

source /etc/borg.d/env

exec > >(tee -i /var/log/backup/backup_log_$BEGIN.txt)  #This file will log everything
exec 2>&1


#Check to see if Bucket is mounted
mount -l | grep ${MNT} 

if [ $? -ne 0 ]
	# If success
	then
		s3fs ${BUCKET} ${MNT} -o passwd_file=${HOME}/.passwd-s3fs -o url=https://s3.${BUCKET_LOC}.wasabisys.com	
	fi

#Cleanup backup snapshots with same name in case they exist	
cd ${LXD}
for i in *
	do
	    NAME="$i"
		# Now delete the 'lxd-image-backup-$NAME' image
		lxc image delete lxd-image-backup-$NAME 2>/dev/null >/dev/null
					
		# And delete the temporary 'backup' snapshot
		lxc delete local:$NAME/backup 2>/dev/null >/dev/null	
done

export BORG_PASSCOMMAND="cat /etc/borg.d/.borg-passphrase"

unset NAME

cd ${LXD}
for i in * 
	do
	    NAME="$i"
		
		# Filename with no format (container_name.snapshot-backup)
		FILENAME_NOFORMAT="snapshot-backup-$NAME"
		
		# Full Filename with format (container_name.snapshot-backup.format)
		FILENAME="$FILENAME_NOFORMAT.tar.gz"
		
	    DIRECTORY=${MNT}/$i
		if [ ! -d "$DIRECTORY" ]
   			then
			    				
				# Check if the required arguments are not empty
				if [ "$i" == '' ];
		
					# If one or more arguments are empty, produce an error
					then
						exit 1 # Exit with general error
					# If none of these arguments are empty, the script can proceed
					else			 
						borg init --encryption=repokey-blake2 ${MNT}/$i

						borg info ${MNT}/$i 

						if [ $? -ne 0 ]

							# If success
							then
								echo "Failed to add new container $i to backup" | mutt -s "Failed to add container $i" ${EMAIL}
							else
								borg key export ${MNT}/$i /etc/borg.d/keys/$i-key.txt
								echo "New container $i added to backup successfully. Attached Repo Key." | mutt -s "New container $i added" ${EMAIL} -a /etc/borg.d/keys/$i-key.txt						
								
								# Create a snapshot of the container, with the snapshot name being 'backup'
								lxc snapshot $NAME backup
								
								# Publish this snapshot temporarily with an alias name of 'lxd-image-backup-$NAME'
								lxc publish $NAME/backup --alias lxd-image-backup-$NAME
								
								# Export the 'lxd-image-backup-$NAME' image, this will save the export in a 'tar.gz' format to the specified temporary location
								#lxc image export lxd-image-backup-$NAME .
								lxc image export lxd-image-backup-$NAME ${TEMP}/$FILENAME_NOFORMAT
						
								borg create --verbose --filter AME --list --stats --show-rc --compression ${COMPRESSION} ${MNT}/$NAME::$NAME-$BEGIN ${TEMP}/$FILENAME

								borg prune --list --prefix $NAME- --show-rc	--keep-daily $DAILY --keep-weekly $WEEKLY --keep-monthly $MONTHLY ${MNT}/$i
			
								borg check --repository-only ${MNT}/$i
						
								borg check --archives-only --verify-data --prefix $NAME- --last 3 ${MNT}/$i
	
								borg info ${MNT}/$i 			

								####--Cleanup--####

								# Now delete the 'lxd-image-backup-$NAME' image
								lxc image delete lxd-image-backup-$NAME
							
								# And delete the temporary 'backup' snapshot
								lxc delete local:$NAME/backup			
							
								# Verify snapshot file has been created
		
								if [ -f ${TEMP}/$FILENAME ]
		
									# If success
									then					
										# Remove snapshot file from the local server
										rm ${TEMP}/$FILENAME
															
										# Verify snapshot file has been removed from the local server
										if [ -f ${TEMP}/$FILENAME ]
		
											# If success
											then	
												# Send an email explaining this failure
												echo "Failed removing snapshot file from local server." | mutt  -s "Backup Failed" ${EMAIL}
										
											# If failure
												borg info ${MNT}/$i >> /tmp/backup_$i.txt						
												END=$(date +'%H:%M:%S')
												echo "Backup has finished successfully. $FILENAME has been created and backed up successfully. Backup started at $BEGIN and was completed at $END. Log and size of backup are in attachments" | mutt -s "Success: $NAME Backup" ${EMAIL} -a /var/log/backup/backup_log_$BEGIN.txt -a /tmp/backup_$i.txt 
												rm /tmp/backup_$i.txt
										fi                
									# If failure
									else		
										# Send an email explaining this failure
										echo "Creating $FILENAME on local server failed." | mutt  -s "Backup Failed" ${EMAIL}
								fi     
						fi
							
				fi		
																	
						
			
			else
				# Create a snapshot of the container, with the snapshot name being 'backup'
						lxc snapshot $NAME backup
						
						# Publish this snapshot temporarily with an alias name of 'lxd-image-backup-$NAME'
						lxc publish $NAME/backup --alias lxd-image-backup-$NAME
						
						# Export the 'lxd-image-backup-$NAME' image, this will save the export in a 'tar.gz' format to the specified temporary location
						#lxc image export lxd-image-backup-$NAME .
						lxc image export lxd-image-backup-$NAME ${TEMP}/$FILENAME_NOFORMAT
						
						borg create --verbose --filter AME --list --stats --show-rc --compression ${COMPRESSION} ${MNT}/$NAME::$NAME-$BEGIN ${TEMP}/$FILENAME
			
						borg prune --list --prefix $NAME- --show-rc	--keep-daily $DAILY --keep-weekly $WEEKLY --keep-monthly $MONTHLY ${MNT}/$i
			
						borg check --repository-only ${MNT}/$i
					
						borg check --archives-only --verify-data --prefix $NAME- --last 3 ${MNT}/$i
	

						####--Cleanup--####

						# Now delete the 'lxd-image-backup-$NAME' image
						lxc image delete lxd-image-backup-$NAME
					
						# And delete the temporary 'backup' snapshot
						lxc delete local:$NAME/backup			
					
						# Verify snapshot file has been created
		
						if [ -f ${TEMP}/$FILENAME ]
		
							# If success
							then					
								# Remove snapshot file from the local server
								rm ${TEMP}/$FILENAME
													
								# Verify snapshot file has been removed from the local server
								if [ -f ${TEMP}/$FILENAME ]
		
									# If success
									then	
										# Send an email explaining this failure
										echo "Failed removing snapshot file from local server." | mutt  -s "Backup Failed" ${EMAIL}
												
									# If failure
										borg info ${MNT}/$i >> /tmp/backup_$i.txt						
										END=$(date +'%H:%M:%S')
										echo "Backup has finished successfully. $FILENAME has been created and backed up successfully. Backup started at $BEGIN and was completed at $END. Log and size of backup are in attachments" | mutt -s "Success: $NAME Backup" ${EMAIL} -a /var/log/backup/backup_log_$BEGIN.txt -a /tmp/backup_$i.txt 
										rm /tmp/backup_$i.txt
									fi                
							# If failure
							else		
								# Send an email explaining this failure
								echo "Creating $FILENAME on local server failed." | mutt  -s "Backup Failed" ${EMAIL}
							fi     
					fi
done

#Missing Backup Detection
ls ${MNT} >> ${TEMP}/comp1.txt

ls ${LXD} >> ${TEMP}/comp2.txt

sort ${TEMP}/comp1.txt >> ${TEMP}/comp1.sorted
sort ${TEMP}/comp2.txt >> ${TEMP}/comp2.sorted

COMPARE=$(diff ${TEMP}/comp1.sorted ${TEMP}/comp2.sorted | sed -n '1!p') 
COMPARE=${COMPARE#?}
if [ "$COMPARE" != "" ]
	then
		echo "There is a backup for a container that no longer exists in the system. Missing containers:
$COMPARE" | mutt -s "Container Missing" ${EMAIL}
	fi
	
rm ${TEMP}/comp*

exit 0 # Successful exit
